# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: latest # Versiunea specifică de Hugo. Recomandat să o menții actualizată manual.
    steps:
      # Pasul 1: Clonează repository-ul
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive # Asigură-te că submodules (teme Hugo) sunt clonate

      # Pasul 2: Setează Hugo. Recomandat să folosești peaceiris/actions-hugo pentru simplitate.
      # Această acțiune instalează Hugo și Dart Sass (dacă e necesar)
      - name: Setup Hugo and Dart Sass
        uses: peaceiris/actions-hugo@v3 # Folosim v3 pentru cea mai recentă versiune stabilă
        with:
          hugo-version: "${{ env.HUGO_VERSION }}" # Folosește versiunea definită în env
          extended: true # Necesită extended pentru SASS/SCSS

      # Pasul 3: Configurează mediul pentru GitHub Pages
      # Această acțiune setează variabilele de mediu necesare pentru deploy-ul pe Pages.
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      # Pasul 4: Instalează dependențe Node.js (dacă tema ta Hugo le folosește)
      # Dacă tema ta nu folosește Node.js (ex: PostCSS, Tailwind), poți șterge acest pas.
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"

      # Pasul 5: Construiește site-ul Hugo
      # Aici este corecția cheie: NU mai suprascrie baseURL cu ${{ steps.pages.outputs.base_url }}.
      # baseURL trebuie să fie setat corect în fișierul tău hugo.yaml.
      - name: Build with Hugo
        env:
          HUGO_CACHEDIR: ${{ runner.temp }}/hugo_cache
          HUGO_ENVIRONMENT: production
        run: |
          hugo --minify # Hugo va folosi baseURL definit în hugo.yaml

      # Pasul 6: Încarcă artefactul (site-ul construit)
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public # Directorul unde Hugo construiește site-ul

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Acest job depinde de succesul job-ului 'build'
    steps:
      # Pasul 7: Deploy la GitHub Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 # Acțiunea oficială de deploy
